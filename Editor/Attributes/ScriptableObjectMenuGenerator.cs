using System;
using System.IO;
using System.Linq;
using System.Reflection;
using UnityEngine;

namespace UnityEditor.GameUtils
{
    public static class ScriptableObjectMenuGenerator
    {
        private const string _outputPath = "Assets/Editor/Generated/MenuItems.cs";

        [MenuItem("Tools/Regenera Menu Craftables")]
        public static void GenerateMenuItems()
        {
            var scriptableTypes = AppDomain.CurrentDomain.GetAssemblies()
                .SelectMany(assembly => assembly.GetTypes())
                .Where(type =>
                    type.IsClass &&
                    !type.IsAbstract &&
                    typeof(ScriptableObject).IsAssignableFrom(type) &&
                    type.GetCustomAttribute<CreatableScriptableObjectAttribute>() != null
                ).ToList();

            if (scriptableTypes.Count == 0)
            {
                Debug.LogWarning("Nessun ScriptableObject trovato con l'attributo [CanCraft].");
                return;
            }

            using (var writer = new StreamWriter(_outputPath, false))
            {
                writer.WriteLine("// AutoGenerated files. DONT EDIT!");
                writer.WriteLine("using UnityEngine;");
                writer.WriteLine("using UnityEditor;");
                writer.WriteLine("");
                writer.WriteLine("public static class MenuItems");
                writer.WriteLine("{");

                foreach (var type in scriptableTypes)
                {
                    var attr = type.GetCustomAttribute<CreatableScriptableObjectAttribute>();
                    string menuName = attr.MenuName.Replace("/", "_");
                    string className = type.FullName;

                    writer.WriteLine($"\t[MenuItem(\"Assets/Create/Craftables/{attr.MenuName}\")]");
                    writer.WriteLine($"\tprivate static void Create_{menuName}()");
                    writer.WriteLine("\t{");
                    writer.WriteLine($"\t\tvar asset = ScriptableObject.CreateInstance<{className}>();");
                    writer.WriteLine($"\t\tstring path = EditorUtility.SaveFilePanelInProject(\"Crea {attr.MenuName}\", \"{attr.MenuName}.asset\", \"asset\", \"Scegli dove salvare\");");
                    writer.WriteLine("\t\tif (!string.IsNullOrEmpty(path))");
                    writer.WriteLine("\t\t{");
                    writer.WriteLine("\t\t\tAssetDatabase.CreateAsset(asset, path);");
                    writer.WriteLine("\t\t\tAssetDatabase.SaveAssets();");
                    writer.WriteLine("\t\t\tEditorUtility.FocusProjectWindow();");
                    writer.WriteLine("\t\t\tSelection.activeObject = asset;");
                    writer.WriteLine("\t\t}");
                    writer.WriteLine("\t}");
                    writer.WriteLine("");
                }

                writer.WriteLine("}");
            }

            AssetDatabase.Refresh();
        }
    }
}